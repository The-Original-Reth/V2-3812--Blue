#####
#temperature sensor board
#temp_sensor_board.cfg
#####

[mcu qtpy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_DF60BCA003373E34-if00                   #rp2040 adafruit qt py
restart_method: command

[aht21] 
#necessary for b1gnates aht21 driver

###
#display qtpy temp in mainsail
###
[temperature_sensor qt_py]
sensor_type: temperature_host
max_temp: 100
gcode_id: qtpy_th

###################################################################################################
#INSIDE THE CHAMBER
#aht21 aht21_chamber
#bme680 voc680_chamber
###########################
#BME680 on I2C1
###########################
[temperature_sensor voc680_chamber]
sensor_type: BME280 #really a 680
i2c_address: 119
#   Default is 118 (0x76). Some BME280 sensors have an address of 119 (0x77)
i2c_mcu: qtpy
i2c_bus: i2c1f        #this equates to the I2C of GPIO22 (SCL1)-23(SDA1)
#i2c_speed:
   
[gcode_macro QUERY_BME_CHAMBER]
gcode:
    {% set sensor = printer["bme280 voc680_chamber"] %}
    {action_respond_info( "BME680 chamber...\n"
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%\n"
        "Gas Level: %.2f ppm" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity,
            sensor.gas))} 

###########################
#SGP30 on I2C1 inside the chamber
###########################
[sgp30 vocsgp30_chamber]
i2c_mcu: qtpy
i2c_bus: i2c1f        #this equates to the I2C of GPIO22 (SCL1)-23(SDA1); i2c address is 0x58
temperature_sensor: bme280 voc680_chamber
csv_basename: /tmp/sgp30_inside

[gcode_macro QUERY_SGP_CHAMBER]
gcode:
    {% set sensor = printer["sgp30 vocsgp30_chamber"] %}
    {action_respond_info( "SGP30 chamber...\n"
        "eCO2: %.2f ppm\n"
        "VOC Level: %.2f ppb" % (
            sensor.eco2,
            sensor.tvoc))}

###########################
#SGP40 on I2C1 inside the chamber
###########################
[sgp40 sgp40_chamber]
i2c_mcu: qtpy
i2c_bus: i2c1f        #this equates to the I2C of GPIO22 (SCL1)-23(SDA1); i2c address is 0x58
temperature_sensor: bme280 voc680_chamber
csv_basename: /tmp/sgp40_inside

[gcode_macro QUERY_SGP_FORTY_CHAMBER]
gcode:
    {% set sensor = printer["sgp40 sgp40_chamber"] %}
    {action_respond_info("SGP40 inside...\n"
        "Inside Air Quailty: %.2f \n" % (
            sensor.air_quality))}

###########################
#AHT21 on I2C1 inside the chamber
###########################
[temperature_sensor aht21_chamber]
sensor_type: AHT21
i2c_mcu: qtpy
i2c_bus: i2c1f       #this equates to the I2C of GPIO22 (SCL1)-23(SDA1); i2c address is 0x38

[gcode_macro QUERY_AHT_CHAMBER]
gcode:
    {% set sensor = printer["temperature_sensor aht21_chamber"] %}
    {action_respond_info("AHT21 chamber...\n"
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%\n" % (
            sensor.temperature,
            sensor.humidity))} 

###########################
#ENS160 on I2C1 inside the chamber
###########################
[ens160 ens160_chamber]
i2c_mcu: qtpy
i2c_bus: i2c1f      #this equates to the I2C of GPIO22 (SCL1)-23(SDA1); i2c address is 0x52 or 0x53
temperature_sensor: bme280 voc680_chamber #aht21 aht21_chamber
csv_basename: /tmp/ens160_inside

[gcode_macro QUERY_ENS_CHAMBER]
gcode:
    {% set sensor = printer["ens160 ens160_chamber"] %}
    {action_respond_info( "ENS160 chamber...\n"
       # "Air Quality Index (AQI)\n" #rated on a 1-5 scale, 1 is good air, 5 is bad air, 3 is ventilate
        "eCO2: %.2f ppm\n"
        "VOC Level: %.2f ppb" % (
         #   sensor.aqi,
            sensor.eco2,
            sensor.tvoc))} 

###################################################################################################
#OUTSIDE THE CHAMBER
###########################
#BME680 on I2C0
###########################
[temperature_sensor voc680_outside]

sensor_type: BME280 #really a 680
i2c_address: 119
#   Default is 118 (0x76). Some BME280 sensors have an address of 119
#   (0x77).
i2c_mcu: qtpy
i2c_bus: i2c0g         #this equates to the I2C of GPIO25 (SCL1)-24(SDA1)
#i2c_speed:
   
[gcode_macro QUERY_BME_OUTSIDE]
gcode:
    {% set sensor = printer["bme280 voc680_outside"] %}
    {action_respond_info( "BME680 outside...\n"
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%\n"
        "Gas Level: %.2f ppm" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity,
            sensor.gas))} 

###########################
#SGP30 on I2C0
###########################
[sgp30 vocsgp30_outside]
i2c_mcu: qtpy
i2c_bus: i2c0g        #this equates to the I2C of GPIO25 (SCL1)-24(SDA1); i2c address is 0x58 - sgp40 uses the address of 0x59
temperature_sensor: bme280 voc680_outside
csv_basename: /tmp/sgp30_outside

[gcode_macro QUERY_SGP_OUTSIDE]
gcode:
    {% set sensor = printer["sgp30 vocsgp30_outside"] %}
    {action_respond_info( "SGO30 outside...\n"
        "eCO2: %.2f ppm\n"
        "Gas Level: %.2f ppb" % (
            sensor.eco2,
            sensor.tvoc))}

###########################
#SGP40 on I2C0 outside the chamber
###########################
[sgp40 sgp40_outside]
i2c_mcu: qtpy
i2c_bus: i2c0g        #this equates to the I2C of GPIO22 (SCL1)-23(SDA1); i2c address is 0x58
temperature_sensor: bme280 voc680_outside
csv_basename: /tmp/sgp40_outside

[gcode_macro QUERY_SGP_FORTY_OUTSIDE]
gcode:
    {% set sensor = printer["sgp40 sgp40_outside"] %}
    {action_respond_info( "SGP40 outside...\n"
        "Outside Air Quailty: %.2f \n" % (
            sensor.air_quality))}


###########################
#AHT21 on I2C1 inside the chamber
###########################
[temperature_sensor aht21_outside]
sensor_type: AHT21
i2c_mcu: qtpy
i2c_bus: i2c0g       #this equates to the I2C of GPIO22 (SCL1)-23(SDA1); i2c address is 0x38

[gcode_macro QUERY_AHT_OUTSIDE]
gcode:
    {% set sensor = printer["temperature_sensor aht21_outside"] %}
    {action_respond_info("AHT21 outside...\n"
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%\n" % (
            sensor.temperature,
            sensor.humidity))} 

###########################
#ENS160 on I2C1 inside the chamber
###########################
[ens160 ens160_outside]
i2c_mcu: qtpy
i2c_bus: i2c0g      #this equates to the I2C of GPIO22 (SCL1)-23(SDA1); i2c address is 0x52 or 0x53
temperature_sensor: bme280 voc680_outside#
csv_basename: /tmp/ens160_outside

[gcode_macro QUERY_ENS_OUTSIDE]
gcode:
    {% set sensor = printer["ens160 ens160_outside"] %}
    {action_respond_info( "ENS160 outside...\n"
       # "Air Quality Index (AQI)\n" #rated on a 1-5 scale, 1 is good air, 5 is bad air, 3 is ventilate
        "eCO2: %.2f ppm\n"
        "VOC Level: %.2f ppb" % (
         #   sensor.aqi,
            sensor.eco2,
            sensor.tvoc))} 
###################################################################################################
###########################
#Displays combined sensor data
###########################
[gcode_macro QUERY_VOC]
gcode:
#inside the chamber
    QUERY_BME_CHAMBER
    QUERY_SGP_CHAMBER
    QUERY_ENS_CHAMBER
    QUERY_SGP_FORTY_CHAMBER
#outside the chamber
    QUERY_BME_OUTSIDE
    QUERY_SGP_OUTSIDE
    QUERY_ENS_OUTSIDE
    QUERY_SGP_FORTY_OUTSIDE

###########################
#Turn sensor data on and off
###########################
[gcode_macro START_VOC_DATA]
gcode:
    #inside the chamber
    AIR_QUALITY_CSV_LOGGING_START NAME=vocsgp30_chamber
    AIR_QUALITY_CSV_LOGGING_START NAME=ens160_chamber
    AIR_QUALITY_CSV_LOGGING_START NAME=sgp40_chamber
    #outside the chamber
    AIR_QUALITY_CSV_LOGGING_START NAME=vocsgp30_outside
    AIR_QUALITY_CSV_LOGGING_START NAME=ens160_outside
    AIR_QUALITY_CSV_LOGGING_START NAME=sgp40_outside

[gcode_macro STOP_VOC_DATA]
gcode:
    #inside the chamber
    AIR_QUALITY_CSV_LOGGING_STOP NAME=vocsgp30_chamber
    AIR_QUALITY_CSV_LOGGING_STOP NAME=ens160_chamber
    AIR_QUALITY_CSV_LOGGING_STOP NAME=sgp40_chamber
    #outside the chamber
    AIR_QUALITY_CSV_LOGGING_STOP NAME=vocsgp30_outside
    AIR_QUALITY_CSV_LOGGING_STOP NAME=ens160_outside
    AIR_QUALITY_CSV_LOGGING_STOP NAME=sgp40_outside

###########################
#calculate inside and outside baseline values, and
#save them to saved_variables.cfg
#requires in printer config
#Saved Variables
#[save_variables]
#filename: ~/klipper_config/saved_variables.cfg
####
#this code is based upon https://github.com/MapleLeafMakers/KlipperMacros/blob/main/air_filter_timer.cfg
#by: So I says... [V0.420|VT.634] (aka Andre#7463)
#recommend using his code for a time for your nevermore filter, or any filter
###########################
[gcode_macro _BASELINE_VARIABLES]
variable_time_min: 10  #time in minutes
variable_sensor_outside_voc: 0
variable_sensor_inside_voc: 0
variable_count: 1  #needs to be 1 for the first time we go through
gcode:

[delayed_gcode BASELINE_CALC] #need to start START_VOC_DATA before calling this delayed macro
initial_duration: 0
gcode:
    {% set sensor1 = printer["sgp30 vocsgp30_chamber"] %}
    {% set sensor2 = printer["sgp30 vocsgp30_outside"] %}
    {% set sensor_outside_temp = printer['gcode_macro _BASELINE_VARIABLES'].sensor_outside_voc|float %}
    {% set sensor_inside_temp = printer['gcode_macro _BASELINE_VARIABLES'].sensor_inside_voc|float %}
    {% set count_temp = printer['gcode_macro _BASELINE_VARIABLES'].count|int %}
    {% set time_temp = printer['gcode_macro _BASELINE_VARIABLES'].time_min|int %}
    {% if count_temp < time_temp %}
       SET_GCODE_VARIABLE MACRO=_BASELINE_VARIABLES VARIABLE=sensor_outside_voc VALUE={sensor_outside_temp + sensor2.tvoc}
       SET_GCODE_VARIABLE MACRO=_BASELINE_VARIABLES VARIABLE=sensor_inside_voc VALUE={sensor_inside_temp + sensor1.tvoc}
       SET_GCODE_VARIABLE MACRO=_BASELINE_VARIABLES VARIABLE=count VALUE={count_temp +1}
       {action_respond_info ("VOC inside %.2f ppb : VOC outside %.2f ppb\n" % (sensor1.tvoc, sensor2.tvoc))}
       UPDATE_DELAYED_GCODE ID=BASELINE_CALC DURATION=60  #every sixty second or 1 min
    {% else %}
       SAVE_VARIABLE VARIABLE=baseline_inside_voc VALUE={(sensor_inside_temp/time_temp)} 
       SAVE_VARIABLE VARIABLE=baseline_outside_voc VALUE={(sensor_outside_temp/time_temp)}
       {action_respond_info (
                            "baseline outside VOC: %.2f ppb\n"
                            "baseline inside VOC: %.2f ppb" % (
                              sensor_outside_temp,
                              sensor_inside_temp))}
       STOP_VOC_DATA
       UPDATE_DELAYED_GCODE ID=BASELINE_CALC DURATION=0  #stop updating GCODE
    {% endif %}

############################################################################
#8/7/2022 need to work on
###########################
#keep nevermore on until internal voc matches external voc
###########################
[delayed_gcode REMOVE_VOC]
initial_duration: 0
gcode:
    {% set sensor1 = printer["sgp30 vocsgp30_chamber"] %}
    {% set sensor2 = printer["sgp30 vocsgp30_outside"] %}
    {%set total_time=1|int %}
    {%set check_time = params.CHECK|default(10)|int %}
    {action_respond_info("Cleaning VOC from Chamber ")}
    {% if sensor1.tvoc > sensor2.tvoc %}
        NEVERMORE_ON
        UPDATE_DELAYED_GCODE ID=REMOVE_VOC DURATION={check_time} #check every 10s
        {action_respond_info("Cleaning VOC from Chamber ")}  #for testing purposes
        {% set check_time = check_time + 1%}
    {% else %} # sensor1 <= sensor2
        UPDATE_DELAYED_GCODE ID=REMOVE_VOC DURATION=0
        NEVERMORE_OFF
        STOP_VOC_DATA
        {action_respond_info("Chamber VOC Removed in {check_time} seconds")}
    {% endif%}

###########################
#keep nevermore on until internal voc matches external voc
#this macro takes into account the baseline vocs
###########################
[delayed_gcode REMOVE_VOC_BASELINE]
initial_duration: 0
gcode:
    {% set sensor1 = printer["sgp30 vocsgp30_chamber"] %}                          #set sensor 1 to chamber voc sensor
    {% set sensor2 = printer["sgp30 vocsgp30_outside"] %}                          #set sensor 2 to the outside voc sensor
    {% set outside_baseline = printer.save_variables.variables.baseline_outside %} #get the outside baseline value from variables file
    {% set inside_baseline = printer.save_variables.variables.baseline_inside %}   #get the inside baseline value from variables file
    {% set time = params.TIME|default(1)|int %}                                    #set default time to check VOC levels
    {% if sensor1.tvoc > sensor2.tvoc %}                                           #check VOC between inside and outside
        UPDATE_DELAYED_GCODE ID=REMOVE_VOC_BASELINE DURATION={TIME} 
        {action_respond_info("End of Print - VOC inside chamber greater than outside chamber ")}
    {% elif sensor1.tvoc > inside_baseline %}                                        #check VOC between inside current and inside baseline
        UPDATE_DELAYED_GCODE ID=REMOVE_VOC_BASELINE DURATION={TIME} 
        {action_respond_info("End of Print - VOC inside chamber greater than inside chamber baseline")} 
    {% else %}                                                                     # if in else loop then VOC of sensor 1 <= sensor2
        UPDATE_DELAYED_GCODE ID=REMOVE_VOC_BASELINE DURATION=0                              # stop the delayed gcode
        NEVERMORE_OFF                                                              #turn off nevermore - include here any other filter fans
        STOP_VOC_DATA                                                              #stop the VOC data collection
        #check's VOC outside chamber vs outside chamber baseline
        #can't really do anything about it in the printer except to tell the user to vent the room
        #could keep this in the delayed gcode loop until room clear to continue to warn user
        {action_respond_info("Chamber VOC Removed")}
        {% if sensor2.tvoc > outside_baseline %}                                   #check outside VOC - cannot do anything but warn user
            {action_respond_info("VENT THE PRINTER ROOM - VOC outside chamber is greater than outside chamber baseline \n"
            "Outside SGP30 Gas Level: %.2f ppb\n" 
            "Outside baseline VOC level: %.2f ppb" % (
            sensor2.tvoc,
            outside_baseline))}
        {% else %}                                                                 #Voc outside is less than or equal to voc outside baseline
            {action_respond_info("VOC outside printer below or equal to outside VOC baseline")}
        {% endif %}

    {% endif%}
    
    
    
    
    












            
